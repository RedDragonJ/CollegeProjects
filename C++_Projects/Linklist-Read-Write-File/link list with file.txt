Script started on Tue 08 Apr 2014 05:59:45 PM EDT
]0;has92@acm:~/cs457/linked_list[?1034h[has92@acm linked_list]$ finger has92
Login: has92          			Name: hanxin sun 2016
Directory: /home/has92              	Shell: /bin/bash
On since Tue Apr  8 17:30 (EDT) on pts/21 from sremote-10-195-63-10.vpn.pitt.edu
Last login Tue Apr  8 17:31 (EDT) on pts/23 from sremote-10-195-63-10.vpn.pitt.edu
No mail.
No Plan.
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ rm -f a.out
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ rm -f *.o
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ cat makefile
a.out: main.o list.o
	g++ -g main.o list.o

main.o: main.cpp list.h
	g++ -c -g main.cpp

list.o: list.cpp list.h
	g++ -c -g list.cpp
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ cat main.cpp
#include <iostream>
#include "list.h"
#include <string.h>  // <string>

    using namespace std;

int main ( )
{
   // declare variables
   int choice, printorder;
   char idbuffer[100];
   rec r; 
   char keyfile[20];
   char answerfile[20];
   char newfile1[20];
   char newfile2[20];

   // loop to give options and user choose what to do
   do
   {  
      cout << endl;
      cout << "Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit "<<endl;
      cin >> choice;
   
       switch ( choice )
       {
          case 1:  //AddItem
             cout << "\nEnter ID ";
             cin >> idbuffer;
               
             r.id = idbuffer;
             cout << "\nFirst Name ";
             cin >> r.firstname;
             cout << "\nLast Name ";
             cin >>  r.lastname;
	     cout << "\nEnter answers\n";
	     for (int i=0; i < 10; ++i)
	     {
		cin >> r.answer[i];
	     }	     

             if ( AddItem ( r ))
             {
                cout << "\nSuccess!\n";
             }
             else
             {
                cout << "\nItem failed to be added\n";
             }

             break;
          case 2:  //Delete
             cout << "\nEnter id :";
             cin >> idbuffer;
             if ( DeleteItem ( idbuffer )) 
             {
                cout << "\nDelete OK\n";
             }
             else
             {
                cout << "\nDelete Failed for " << idbuffer << endl;
             }
             break;
          case 3: // Print
            cout << "Enter order 0 - Ascending, 1 - Descending\n";
            cin >> printorder;
            PrintList (printorder); 
            break;
	  case 4: // Read from file
	    // user input file names to be read
	    cout << "Enter your key(.dat) filename to be read: ";
	    cin >> keyfile;
	    cout << endl;
	    cout << "Enter your answers(.dat) filename to be read: ";
	    cin >> answerfile;
	    cout << endl;
	    if ( ReadData ( keyfile, answerfile ))
	    {
		cout << "\nRead" << keyfile << " and " << answerfile << " Successfully\n";
	    }
	    else
	    {
		cout << "\nFail to Read\n";
	    }
	    break;
	  case 5: // Write to file
	    // user input file names to be write
	    cout << "Enter your new file name(mynewkey.dat) to be write: ";
	    cin >> newfile1;
	    cout << endl;
	    cout << "Enter your new file name(mynewanswers.dat) to be write: ";
	    cin >> newfile2;
	    cout << endl;
	    if ( WriteData ( newfile1, newfile2 ))
	    {
		cout << "\nWrite " << newfile1 << " and " << newfile2 << " Successfully\n";
	    }
	    else
	    {
		cout << "\nFail to Write\n";
	    }
	    break;
          case 0:  // quit
             break;

 
          default: // bad choice
             break; 
       } // end switch

   } 
   while ( choice != 0 );// end do while
}  // end main
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ cat list.cpp
# include <iostream>
# include <string.h>
# include <ctype.h>
# include <fstream>
# include <stdlib.h>
# include <iomanip>
# include "list.h"

using namespace std;

// declare first and last as NULL;
rec *first = NULL;
rec *last = NULL;

// function for delete the whole list at once
void deletelist (void)
{
	while (first != NULL)
	{
		DeleteItem (first-> id);
	}
	
	first = NULL;
	last = NULL;
}

// find size of file answer
int Count (char *Filename)
{
	ifstream inFile;
	char *ptr;
	ptr = Filename;
	
	// open answer file
	inFile.open (ptr, ios::in);
	int A[10];
	char tempid[30];

	// check if file open fail or not
	if (inFile.fail())
	{
		return 0;
	}

	// loop answer file and find size
	int size1 = 0;
	while (inFile >> tempid >> A[0] >> A[1] >> A[2] >> A[3] >> A[4] >> A[5] >> A[6] >> A[7] >> A[8] >> A[9])
	{
		size1++;
	}
	// close answer file
	inFile.close();

	return size1;	

}

// create and add nodes to list
int AddItem ( rec r )
{
	rec *firstnode;
	rec *newnode;
	rec *current;
	rec *begin;
	rec *idcheck;

	// insert first node if list is empty;
	if (first == NULL)
	{
		// create first NULL;
		firstnode = new rec;
		firstnode-> id = new char[strlen(r.id)+1];
		strcpy (firstnode-> id, r.id);
		strcpy (firstnode-> firstname, r.firstname);
		strcpy (firstnode-> lastname, r.lastname);
		for (int i=0; i < 10; ++i)
		{
			firstnode-> answer[i] = *(r.answer+i);
		}

		firstnode-> prev = NULL;
		firstnode-> next = NULL;
		first = firstnode;
		last = firstnode;

		return 1;
	}

	// insert new node if list not empty;
	else
	{
		// create a newnode;
		newnode = new rec;
		newnode-> id = new char[strlen(r.id)+1];
		strcpy (newnode-> id, r.id);
		strcpy (newnode-> firstname, r.firstname);
		strcpy (newnode-> lastname, r.lastname);		
		for (int i=0; i < 10; ++i)
		{
			newnode-> answer[i] = *(r.answer+i);
		}

		// check for duplicate id in the list;
		idcheck = first;

		while (idcheck != NULL)
		{
			if ((strcmp(idcheck-> id, newnode-> id)) == 0)
			{
				return 0;
			}
			else
			{
				idcheck = idcheck-> next;
			}
		}
		
		// insert from back
		if (strcmp(newnode-> lastname, last-> lastname) > 0)
		{
			newnode-> prev = last;
			newnode-> next = NULL;
			last-> next = newnode;
			last = newnode;

			return 1;
		}
		// insert from front
		else if (strcmp(first-> lastname, newnode-> lastname) > 0)
		{
			newnode-> next = first;
			newnode-> prev = NULL;
			first-> prev = newnode;
			first = newnode;

			return 1;
		}
		// insert from middle
		else
		{
			current = first;

			// search list and check for last name
			while (current-> next != NULL)
			{
				if (((strcmp(newnode-> lastname, current-> lastname)) > 0) && ((strcmp(current-> next-> lastname, newnode-> lastname)) > 0))
				{
			                newnode-> prev = current;
					newnode-> next = current-> next;
					current-> next-> prev = newnode;
					current-> next = newnode;
							
					return 1;
				}
				else if ((strcmp(newnode-> lastname, current-> lastname)) == 0)
				{
					newnode-> prev = current;
					newnode-> next = current-> next;
					current-> next-> prev = newnode;
					current-> next = newnode;

					return 1;
				}
				else
				{
					current = current-> next;
				}
			}
		}
	}
}

// delete the list by id 
int DeleteItem ( char *delid )
{
	char *ID;	
	rec *begin, *end, *middle, *onlynode;

	ID = delid;

	// check if list is NULL;
	if (first == NULL)
	{
		return 0;
	}

	// check if only one node in list;
	else if (first-> next == NULL)
	{
		// delete only node in list
		if ((strcmp(first-> id, ID)) == 0)
		{
			onlynode = last;
			last = onlynode-> prev;
			first = NULL;
			delete[]onlynode-> id;
			delete onlynode;
			
			return 1;
		}
		// fail and return
		else
		{
			return 0;
		}
	}
	// if not only node in the list
	else
	{	 

		// delete front node;
		if ((strcmp(first-> id, ID)) == 0)
		{
			begin = first;
			first = first-> next;
			first-> prev = NULL;
			begin-> next = NULL;
			delete[]begin-> id;
			delete begin;

			return 1;
		}

		// delete back node;
		else if ((strcmp(last-> id, ID)) == 0)
		{
			end = last;
			last = last-> prev;
			last-> next = NULL;
			end-> prev = NULL;
			delete[]end-> id;
			delete end;
			
			return 1;
		}

		// delete middle node
		else
		{
			middle = first;

			// search in list and delete node if id match
			while (middle-> next != NULL)
			{
				if ((strcmp(middle-> id, ID)) == 0)
				{
					middle-> prev-> next = middle-> next;
					middle-> next-> prev = middle-> prev;
					middle-> prev = NULL;
					middle-> next = NULL;
					delete[]middle-> id;
					delete middle;

					return 1;
				}
				// otherwise pass on in list
				else
				{
					middle = middle-> next;
				}
			}
		}
	}
	return 0;
}

// read file into list
int ReadData ( char *k, char *a )
{
	char *kptr, *aptr;
	kptr = k;
	aptr = a;
	char idfile1[50]; 
	char fname[15];
	char lname[15];
	int size;
	rec recfile;

	// delete whole list if  not NULL
	if (first != NULL)
	{
		deletelist ();
	}

	// count for answer file's size
	size = Count (a);	

	// open answer file
	ifstream inFile1, inFile2;
	inFile2.open (aptr, ios::in);

	// check both file if fail to open
	if (inFile1.fail())
	{
		return 0;
	}
	if (inFile2.fail())
	{
		return 0;
	}

	// allocate array
	char *idfile2;
	idfile2 = new char[30];
	int *A;
	A = new int[10];

	// loop answer's data
	for (int i=1; i <= size; ++i)
	{
		inFile2 >> idfile2 >> A[0] >> A[1] >> A[2] >> A[3] >> A[4] >> A[5] >> A[6] >> A[7] >> A[8] >> A[9];

		// open key file
		inFile1.open (kptr, ios::in);		
		// loop key's file data
			while (inFile1 >> idfile1 >> fname >> lname)
			{

			// check if both file's id match
				if ((strcmp(idfile2, idfile1)) == 0)
				{
				// deep copy to record
				recfile.id = new char[strlen(idfile2)+1];
				strcpy (recfile.id, idfile2);
				strcpy (recfile.firstname, fname);
				strcpy (recfile.lastname, lname);
				for (int i=0; i < 10; ++i)
				{
					recfile.answer[i] = *(A+i);
				}	
				// add to list
				AddItem (recfile);
				}
			}
		// close key file
		inFile1.close();
	}
	
	// close answer file
	inFile2.close();
	
	// delete pointer variables
	delete[] idfile2;
	delete[] A;

		
	return 1;
}

// write list to two files
int WriteData ( char *nfile1, char *nfile2 )
{
	// open two empty text file
	ofstream outFile1, outFile2;
	outFile1.open (nfile1);
	outFile2.open (nfile2);
	
	// check if both file fail to open
	if (outFile1.fail())
	{
		return 0;
	}
	if (outFile2.fail())
	{
		return 0;
	}

	rec *current;
	current = first;	

	// loop through the list
	while (current != NULL)
	{
		// write list to two different  files
		outFile1 << current-> id << " " << current-> firstname << " " << current-> lastname << endl;
		outFile2 << current-> id << " ";
		for (int i=0; i < 10; ++i)
		{
			outFile2 << *(current-> answer + i);
		}
		outFile2 << endl;
		
		// pass on to next node in list
		current = current-> next;
	}
	
	// close both files
	outFile1.close();
	outFile2.close();

	return 1;
}

// display function to display whatever pass in
void PrintList ( int order )
{
	rec *ptr;

	// print as descending;
	if (order == 1)
	{
		ptr = last;

		// print is empty list;
		if (ptr == NULL)
		{
			cout << " Empty list! " << endl;
		}

		// print is not empty list;
		while (ptr != NULL)
		{
			cout << ptr->id << " ";
			cout << ptr->firstname << " ";
			cout << ptr->lastname << " ";
			for (int i=0; i < 10; ++i)
			{
				cout << *(ptr-> answer+i);
			}
			cout << " ";
			cout << ptr->prev << " ";
			cout << ptr << " ";
			cout << ptr->next << " ";
			cout << endl;
			ptr = ptr-> prev;
		}		
	}

	// print as ascending;
	else if (order == 0)
	{
		ptr = first;		
	
		// print if empty list;
		if (ptr == NULL)
		{
			cout << " Empty list! " << endl;
		}

		// print if not empty list;
		while (ptr != NULL)
		{
			cout << ptr->id << " ";
			cout << ptr->firstname << " ";
			cout << ptr->lastname << " ";
			for (int i=0; i < 10; ++i)
			{
				cout << *(ptr-> answer+i);
			}
			cout << " ";
			cout << ptr->prev << " ";
			cout << ptr << " ";
			cout << ptr->next << " ";
			cout << endl;
			ptr = ptr-> next;
		}
	}
}
// end list
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ cat list.h
// declare a record
struct rec
{
   char * id;
   char firstname[15];
   char lastname[15];
   int answer[10];
   struct rec* prev;
   struct rec* next;
};

// prototype functions
int AddItem ( rec r );
int DeleteItem ( char* delid );
void PrintList ( int order );
int ReadData ( char *k, char *a );
int WriteData ( char *nfile1, char *nfile2 );

]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ make
g++ -c -g main.cpp
g++ -c -g list.cpp
g++ -g main.o list.o
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ ./a.out

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
1

Enter ID AABBB CC

First Name Anita

Last Name Drink

Enter answers
1
2
3
4
5
6
7
8
9
0

Success!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
1

Enter ID AABBCC

First Name Troy

Last Name Edwards

Enter answers
1
2
3
4
5
6
7
8
9
0

Item failed to be added

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
ABCDEFG1234567              1

Enter ID ABCDEFG1234567

First Name James

Last Name Brown

Enter answers
0
0
0
0
0
0
0
0
0
0

Success!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3
Enter order 0 - Ascending, 1 - Descending
0
ABCDEFG1234567 James Brown 0000000000 0 0x2247130 0x2247010 
AABBCC Anita Drink 1234567890 0x2247130 0x2247010 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
4
Enter your key(.dat) filename to be read: key.dat

Enter your answers(.dat) filename to be read: answers.dat


Readkey.dat and answers.dat Successfully

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3
Enter order 0 - Ascending, 1 - Descending
0
5671A Craig Busco 12315742199 0 0x224bd60 0x224b940 
EES6D Mac Daddy 9876543210 0x224bd60 0x224b940 0x224bc00 
56DFD LordMaynard Ferguson 1232145621 0x224b940 0x224bc00 0x224b5d0 
B7S6D George Gershwin 5426517895 0x224bc00 0x224b5d0 0x224b890 
QQQQQ Dirk Giggler 1234567890 0x224b5d0 0x224b890 0x224b730 
A43D2 Benny Goodman 4595412357 0x224b890 0x224b730 0x224baa0 
A5FJ8 Ryan Mantzy 7894561235 0x224b730 0x224baa0 0x224b9f0 
NROP4 Debbie McDallas 5478512145 0x224baa0 0x224b9f0 0x224b680 
A3345G Glenn Miller 5942145637 0x224b9f0 0x224b680 0x224b7e0 
A3345F Cole Porter 4563573457 0x224b680 0x224b7e0 0x224bcb0 
78SS3 Roberto Roddeneck 9876541230 0x224b7e0 0x224bcb0 0x224bb50 
DFDD5 John Smithtrakdeux 1231231230 0x224bcb0 0x224bb50 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
2

Enter id :ZZZZZ

Delete Failed for ZZZZZ

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
2

Enter id :ERT342

Delete Failed for ERT342

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
1

Enter ID GERBE

First Name Dwayne

Last Name Pill

Enter answers
1
2
3
4
5
6
7
8
9
0

Success!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
2

Enter id :5671A

Delete OK

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3
Enter order 0 - Ascending, 1 - Descending
0
EES6D Mac Daddy 9876543210 0 0x224b940 0x224bc00 
56DFD LordMaynard Ferguson 1232145621 0x224b940 0x224bc00 0x224b5d0 
B7S6D George Gershwin 5426517895 0x224bc00 0x224b5d0 0x224b890 
QQQQQ Dirk Giggler 1234567890 0x224b5d0 0x224b890 0x224b730 
A43D2 Benny Goodman 4595412357 0x224b890 0x224b730 0x224baa0 
A5FJ8 Ryan Mantzy 7894561235 0x224b730 0x224baa0 0x224b9f0 
NROP4 Debbie McDallas 5478512145 0x224baa0 0x224b9f0 0x224b680 
A3345G Glenn Miller 5942145637 0x224b9f0 0x224b680 0x2247130 
GERBE Dwayne Pill 1234567890 0x224b680 0x2247130 0x224b7e0 
A3345F Cole Porter 4563573457 0x2247130 0x224b7e0 0x224bcb0 
78SS3 Roberto Roddeneck 9876541230 0x224b7e0 0x224bcb0 0x224bb50 
DFDD5 John Smithtrakdeux 1231231230 0x224bcb0 0x224bb50 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
5
Enter your new file name(mynewkey.dat) to be write: mynewkey.dat

Enter your new file name(mynewanswers.dat) to be write: mynewanswers.dat


Write mynewkey.dat and mynewanswers.dat Successfully

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3
Enter order 0 - Ascending, 1 - Descending
0
EES6D Mac Daddy 9876543210 0 0x224b940 0x224bc00 
56DFD LordMaynard Ferguson 1232145621 0x224b940 0x224bc00 0x224b5d0 
B7S6D George Gershwin 5426517895 0x224bc00 0x224b5d0 0x224b890 
QQQQQ Dirk Giggler 1234567890 0x224b5d0 0x224b890 0x224b730 
A43D2 Benny Goodman 4595412357 0x224b890 0x224b730 0x224baa0 
A5FJ8 Ryan Mantzy 7894561235 0x224b730 0x224baa0 0x224b9f0 
NROP4 Debbie McDallas 5478512145 0x224baa0 0x224b9f0 0x224b680 
A3345G Glenn Miller 5942145637 0x224b9f0 0x224b680 0x2247130 
GERBE Dwayne Pill 1234567890 0x224b680 0x2247130 0x224b7e0 
A3345F Cole Porter 4563573457 0x2247130 0x224b7e0 0x224bcb0 
78SS3 Roberto Roddeneck 9876541230 0x224b7e0 0x224bcb0 0x224bb50 
DFDD5 John Smithtrakdeux 1231231230 0x224bcb0 0x224bb50 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
4
Enter your key(.dat) filename to be read: key.dat

Enter your answers(.dat) filename to be read: answers.dat


Readkey.dat and answers.dat Successfully

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3
Enter order 0 - Ascending, 1 - Descending
0
5671A Craig Busco 12315742199 0 0x224bf00 0x224b890 
EES6D Mac Daddy 9876543210 0x224bf00 0x224b890 0x224bda0 
56DFD LordMaynard Ferguson 1232145621 0x224b890 0x224bda0 0x224bb70 
B7S6D George Gershwin 5426517895 0x224bda0 0x224bb70 0x224bac0 
QQQQQ Dirk Giggler 1234567890 0x224bb70 0x224bac0 0x224b680 
A43D2 Benny Goodman 4595412357 0x224bac0 0x224b680 0x224b940 
A5FJ8 Ryan Mantzy 7894561235 0x224b680 0x224b940 0x224bc00 
NROP4 Debbie McDallas 5478512145 0x224b940 0x224bc00 0x224b7e0 
A3345G Glenn Miller 5942145637 0x224bc00 0x224b7e0 0x224b9f0 
A3345F Cole Porter 4563573457 0x224b7e0 0x224b9f0 0x224be50 
78SS3 Roberto Roddeneck 9876541230 0x224b9f0 0x224be50 0x224b5f0 
DFDD5 John Smithtrakdeux 1231231230 0x224be50 0x224b5f0 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
0
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ cat mynewanswers.dat
EES6D 9876543210
56DFD 1232145621
B7S6D 5426517895
QQQQQ 1234567890
A43D2 4595412357
A5FJ8 7894561235
NROP4 5478512145
A3345G 5942145637
GERBE 1234567890
A3345F 4563573457
78SS3 9876541230
DFDD5 1231231230
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ cat mynewkey.dat
EES6D Mac Daddy
56DFD LordMaynard Ferguson
B7S6D George Gershwin
QQQQQ Dirk Giggler
A43D2 Benny Goodman
A5FJ8 Ryan Mantzy
NROP4 Debbie McDallas
A3345G Glenn Miller
GERBE Dwayne Pill
A3345F Cole Porter
78SS3 Roberto Roddeneck
DFDD5 John Smithtrakdeux
]0;has92@acm:~/cs457/linked_list[has92@acm linked_list]$ exit
exit

Script done on Tue 08 Apr 2014 06:06:00 PM EDT

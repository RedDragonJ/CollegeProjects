Script started on Mon 14 Apr 2014 06:36:32 PM EDT
]0;has92@acm:~/cs457/OOclass[?1034h[has92@acm OOclass]$ rm -f a.out
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ rm -f a.out[K[K[K[K[K*.o
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ cat makefile
a.out: main.o list.o
	g++ -g main.o list.o

main.o: main.cpp list.h
	g++ -c -g main.cpp

list.o: list.cpp list.h
	g++ -c -g list.cpp
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ cat main.cpp
#include <iostream>
#include <cmath>
#include <string.h>  // <string>
#include "list.h"

    using namespace std;

int main ( )
{
   // declare variables
   int choice, printorder;
   char idbuffer[100];
   Rec r;
   List mylist;
   char fnamebuf[15];
   char lnamebuf[15];
   int ansbuf[10];
   char keyfile[20];
   char answerfile[20];
   char newfile1[20];
   char newfile2[20];

   ////////////////////
   //Extra test stuff//
   //-get this stuff working last
   //comment this section out until the first milestone is working
   //YOUR FINAL VERSION SUBMITTED MUST HAVE THIS SECTION WORKING
   //Be sure this section seecutes when you turn it in
   ////////////////////

   int tarr[10] = {4,4,3,3,2,2,1,1,0,0};
   Rec rec1;
   Rec rec2 ((char *)"1992", (char *)"Hank", (char *)"Chigla", tarr);
   cout << endl;
   rec2.Print();
   cout << endl;
   
   cout << endl;
   cout << "----- Rec 123 ----------" << endl;
   
   rec1 = rec2;
   rec1.SetData ((char *)"888a", (char *)"Jerry", (char *)"Malega", tarr);
   Rec rec3 (rec1);

   rec1.Print();
   cout << endl;
   rec2.Print();
   cout << endl;
   rec3.Print();
   cout << endl;
   cout << endl;
   cout << "----- Rec3 ----------" << endl;

   rec3.SetData ((char *)"xxxx", (char *)"Mr", (char *)"Beepers", tarr);
   rec3.Print();

   cout << "\n" <<  mylist.AddItem (rec1) << endl;
   cout << mylist.AddItem (rec2) << endl;
   cout << endl;
   cout << "----- mylist ----------" << endl;
   
   mylist.PrintList(0);

   List myotherlist;
   myotherlist = mylist;

   cout << myotherlist.DeleteItem ((char *)"xxxx") << endl;

   Rec rec4 ((char *)"16", (char *)"Larry", (char *)"Orlando", tarr);

   cout << mylist.AddItem (rec4) << endl;
   cout << endl;

   cout << "####### mylist #######" << endl;
   mylist.PrintList (0);
   cout << endl;    

   cout << "####### myotherlist #######" << endl;
   myotherlist.PrintList (0);
   cout << endl;
   cout << " End test stuff " << endl;
   cout << endl;

   //////////////////
   //End Extra test stuff//
   /////////////////


   // loop to give options and user choose what to do
   do
   {  
      cout << endl;
      cout << "Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit "<<endl;
      cin >> choice;
   
       switch ( choice )
       {
          case 1:  //AddItem
             cout << "\nEnter ID ";
             cin >> idbuffer; 
             cout << "\nFirst Name ";
             cin >> fnamebuf;
             cout << "\nLast Name ";
             cin >>  lnamebuf;
	     cout << "\nEnter answers\n";
     for (int i=0; i < 10; ++i)
	     {
		cin >> ansbuf[i];
	     }	     

	     r.SetData (idbuffer, fnamebuf, lnamebuf, ansbuf);

             if ( mylist.AddItem ( r ))
            {
                cout << "\nSuccess!\n";
             }
             else
             {
                cout << "\nItem failed to be added!\n";
             }

           break;
          case 2:  //Delete
             cout << "\nEnter id: ";
             cin >> idbuffer;
             if ( mylist.DeleteItem ( idbuffer )) 
             {
                cout << "\nDelete OK!\n";
             }
             else
             {
                cout << "\nDelete Failed for " << idbuffer << "!" << endl;
             }
             break;
          case 3: // Print
            cout << "\nEnter order 0 - Ascending, 1 - Descending\n";
            cin >> printorder;
            mylist.PrintList (printorder); 
            break;
	  case 4: // Read from file
	    // user input file names to be read
	    cout << "\nEnter your key(.dat) filename to be read: ";
	    cin >> keyfile;
	    cout << endl;
	    cout << "\nEnter your answers(.dat) filename to be read: ";
	    cin >> answerfile;
	    cout << endl;
	    if ( mylist.ReadData ( keyfile, answerfile ))
	    {
		cout << "\nRead " << keyfile << " and " << answerfile << " Successfully!\n";
	    }
	    else
	    {
		cout << "\nFail to Read!\n";
	    }
	    break;
	  case 5: // Write to file
	    // user input file names to be write
	    cout << "\nEnter your new file name(newkey.dat) to be write: ";
	    cin >> newfile1;
	    cout << endl;
	    cout << "\nEnter your new file name(newanswers.dat) to be write: ";
	    cin >> newfile2;
	    cout << endl;
	    if ( mylist.WriteData ( newfile1, newfile2 ))
	    {
		cout << "\nWrite " << newfile1 << " and " << newfile2 << " Successfully!\n";
    }
	    else
	    {
		cout << "\nFail to Write!\n";
	    }
	    break;
          case 0:  // quit
             break;

 
          default: // bad choice
             break; 
       } // end switch

   } 
   while ( choice != 0 );// end do while
}  // end main
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ cat list.cpp
# include <iostream>
# include <string.h>
# include <ctype.h>
# include <fstream>
# include <stdlib.h>
# include <iomanip>
# include <cmath>
# include "list.h"

using namespace std;

// set data of record;
void Rec::SetData (char *id_in, char *fn, char *ln, int *ans_in)
{
	id = new char[strlen(id_in)+1];
	strcpy (id, id_in);
	strcpy (firstname, fn);
	strcpy (lastname, ln);
	for (int i=0; i < 10; i++)
	{
		answer[i] = *(ans_in+i);
	}
}

// record constructor;
Rec::Rec (char *i, char *fn, char *ln, int *a)
{
	id = new char[strlen(i)+1];
	strcpy (id, i);
	strcpy (firstname, fn);
	strcpy (lastname, ln);
	for (int i=0; i < 10; i++)
	{
		answer[i] = *(a+i);
	}
}

// record constructor to set id to null;
Rec::Rec (void)
{
	id = NULL;
}

// record copy function;
void Rec::operator= (const Rec &r)
{
	if (r.id)
	{
		this-> id = new char[strlen(r.id)+1];
		if (this-> id)
		{
			strcpy (id, r.id);
			strcpy (firstname, r.firstname);
			strcpy (lastname, r.lastname);
			for (int i=0; i < 10; i++)
			{
				answer[i] = *(r.answer+i);
			}
		}
	}
}

// record copy constructor;
Rec::Rec (const Rec &r)
{
	if (r.id)
	{
		this-> id = new char[strlen(r.id)+1];
		if (this-> id)
		{
			strcpy (id, r.id);
			strcpy (firstname, r.firstname);
			strcpy (lastname, r.lastname);
			for (int i=0; i < 10; i++)
			{
				answer[i] = *(r.answer+i);
			}
		}
	}
}

// display record;
void Rec::Print (void)
{
	cout << id << " ";
	cout << firstname << " ";
	cout << lastname << " ";
	for (int i=0; i < 10; i++)
	{
		cout << *(answer+i);
	}
}

Rec::~Rec (void)
{
	delete[] id;
}

// function for delete the whole list at once
void List::deletelist (void)
{
	while (first != NULL)
	{
		DeleteItem (first-> id);
	}
	
	first = NULL;
	last = NULL;
}

// find size of file answer
int List::Count (char *Filename)
{
	ifstream inFile;
	char *ptr;
	ptr = Filename;
	
	// open answer file
	inFile.open (ptr, ios::in);
	int A[10];
	char tempid[30];

	// check if file open fail or not
	if (inFile.fail())
	{
		return 0;
	}

	// loop answer file and find size
	int size1 = 0;
	while (inFile >> tempid >> A[0] >> A[1] >> A[2] >> A[3] >> A[4] >> A[5] >> A[6] >> A[7] >> A[8] >> A[9])
	{
		size1++;
	}
	// close answer file
	inFile.close();

	return size1;	

}

// list constructor to set first and last to null;
List::List (void)
{
	first = NULL;
	last = NULL;
}

// list deep copy function;
void List::operator= (List l)
{
	Rec *newlist;
	newlist = l.first;
	
	while (newlist)
	{
		AddItem (*newlist);
		newlist = newlist-> next;
	}
	
}

// create and add nodes to list
int List:: AddItem ( Rec r )
{
	Rec *firstnode;
	Rec *newnode;
	Rec *current;
	Rec *begin;
	Rec *idcheck;

	// insert first node if list is empty;
	if (first == NULL)
	{
		// create first NULL;
		firstnode = new Rec;
		firstnode-> id = new char[strlen(r.id)+1];
		strcpy (firstnode-> id, r.id);
		strcpy (firstnode-> firstname, r.firstname);
		strcpy (firstnode-> lastname, r.lastname);
		for (int i=0; i < 10; ++i)
		{
			firstnode-> answer[i] = *(r.answer+i);
		}

		firstnode-> prev = NULL;
		firstnode-> next = NULL;
		first = firstnode;
		last = firstnode;

		return 1;
	}

	// insert new node if list not empty;
	else
	{
		// create a newnode;
		newnode = new Rec;
		newnode-> id = new char[strlen(r.id)+1];
		strcpy (newnode-> id, r.id);
		strcpy (newnode-> firstname, r.firstname);
		strcpy (newnode-> lastname, r.lastname);		
		for (int i=0; i < 10; ++i)
		{
			newnode-> answer[i] = *(r.answer+i);
		}

		// check for duplicate id in the list;
		idcheck = first;

		while (idcheck != NULL)
		{
			if ((strcmp(idcheck-> id, newnode-> id)) == 0)
			{
				return 0;
			}
			else
			{
				idcheck = idcheck-> next;
			}
		}
		
		// insert from back
		if (strcmp(newnode-> lastname, last-> lastname) > 0)
		{
			newnode-> prev = last;
			newnode-> next = NULL;
			last-> next = newnode;
			last = newnode;

			return 1;
		}
		// insert from front
		else if (strcmp(first-> lastname, newnode-> lastname) > 0)
		{
			newnode-> next = first;
			newnode-> prev = NULL;
			first-> prev = newnode;
			first = newnode;

			return 1;
		}
		// insert from middle
		else
		{
			current = first;

			// search list and check for last name
			while (current-> next != NULL)
			{
				if (((strcmp(newnode-> lastname, current-> lastname)) > 0) && ((strcmp(current-> next-> lastname, newnode-> lastname)) > 0))
				{
			                newnode-> prev = current;
					newnode-> next = current-> next;
					current-> next-> prev = newnode;
					current-> next = newnode;
							
					return 1;
				}
				else if ((strcmp(newnode-> lastname, current-> lastname)) == 0)
				{
					newnode-> prev = current;
					newnode-> next = current-> next;
					current-> next-> prev = newnode;
					current-> next = newnode;

					return 1;
				}
				else
				{
					current = current-> next;
				}
			}
		}
	}
}

// delete the list by id 
int List::DeleteItem ( char *delid )
{
	char *ID;	
	Rec *begin, *end, *middle, *onlynode;

	ID = delid;

	// check if list is NULL;
	if (first == NULL)
	{
		return 0;
	}

	// check if only one node in list;
	else if (first-> next == NULL)
	{
		// delete only node in list
		if ((strcmp(first-> id, ID)) == 0)
		{
			onlynode = last;
			last = onlynode-> prev;
			first = NULL;
			delete onlynode;
			
			return 1;
		}
		// fail and return
		else
		{
			return 0;
		}
	}
	// if not only node in the list
	else
	{	 

		// delete front node;
		if ((strcmp(first-> id, ID)) == 0)
		{
			begin = first;
			first = first-> next;
			first-> prev = NULL;
			begin-> next = NULL;
			delete begin;

			return 1;
		}

		// delete back node;
		else if ((strcmp(last-> id, ID)) == 0)
		{
			end = last;
			last = last-> prev;
			last-> next = NULL;
			end-> prev = NULL;
			delete end;
			
			return 1;
		}

		// delete middle node
		else
		{
			middle = first;

			// search in list and delete node if id match
			while (middle-> next != NULL)
			{
				if ((strcmp(middle-> id, ID)) == 0)
				{
					middle-> prev-> next = middle-> next;
					middle-> next-> prev = middle-> prev;
					middle-> prev = NULL;
					middle-> next = NULL;
					delete middle;

					return 1;
				}
				// otherwise pass on in list
				else
				{
					middle = middle-> next;
				}
			}
		}
	}
	return 0;
}

// read file into list
int List:: ReadData ( char *k, char *a )
{
	char *kptr, *aptr;
	kptr = k;
	aptr = a;
	char idfile1[50]; 
	char fname[15];
	char lname[15];
	int size;
	Rec recfile;

	// delete whole list if  not NULL
	if (first != NULL)
	{
		deletelist ();
	}

	// count for answer file's size
	size = Count (a);	

	// open answer file
	ifstream inFile1, inFile2;
	inFile2.open (aptr, ios::in);

	// check both file if fail to open
	if (inFile1.fail())
	{
		return 0;
	}
	if (inFile2.fail())
	{
		return 0;
	}

	// allocate array
	char *idfile2;
	idfile2 = new char[30];
	int *A;
	A = new int[10];

	// loop answer's data
	for (int i=1; i <= size; ++i)
	{
		inFile2 >> idfile2 >> A[0] >> A[1] >> A[2] >> A[3] >> A[4] >> A[5] >> A[6] >> A[7] >> A[8] >> A[9];

		// open key file
		inFile1.open (kptr, ios::in);		
		// loop key's file data
			while (inFile1 >> idfile1 >> fname >> lname)
			{

			// check if both file's id match
				if ((strcmp(idfile2, idfile1)) == 0)
				{
				// deep copy to record
				recfile.id = new char[strlen(idfile2)+1];
				strcpy (recfile.id, idfile2);
				strcpy (recfile.firstname, fname);
				strcpy (recfile.lastname, lname);
				for (int i=0; i < 10; ++i)
				{
					recfile.answer[i] = *(A+i);
				}	
				// add to list
				AddItem (recfile);
				}
			}
		// close key file
		inFile1.close();
	}
	
	// close answer file
	inFile2.close();
	
	// delete pointer variables
	delete[] idfile2;
	delete[] A;

		
	return 1;
}

// write list to two files
int List::WriteData ( char *nfile1, char *nfile2 )
{
	// open two empty text file
	ofstream outFile1, outFile2;
	outFile1.open (nfile1);
	outFile2.open (nfile2);
	
	// check if both file fail to open
	if (outFile1.fail())
	{
		return 0;
	}
	if (outFile2.fail())
	{
		return 0;
	}

	Rec *current;
	current = first;	

	// loop through the list
	while (current != NULL)
	{
		// write list to two different  files
		outFile1 << current-> id << " " << current-> firstname << " " << current-> lastname << endl;
		outFile2 << current-> id << " ";
		for (int i=0; i < 10; ++i)
		{
			outFile2 << *(current-> answer + i);
		}
		outFile2 << endl;
		
		// pass on to next node in list
		current = current-> next;
	}
	
	// close both files
	outFile1.close();
	outFile2.close();

	return 1;
}

// display function to display whatever pass in
void List::PrintList ( int order )
{
	Rec *ptr;

	// print as descending;
	if (order == 1)
	{
		ptr = last;

		// print is empty list;
		if (ptr == NULL)
		{
			cout << " Empty list! " << endl;
		}

		// print is not empty list;
		while (ptr != NULL)
		{
			cout << ptr->id << " ";
			cout << ptr->firstname << " ";
			cout << ptr->lastname << " ";
			for (int i=0; i < 10; ++i)
			{
				cout << *(ptr-> answer+i);
			}
			cout << " ";
			cout << ptr->prev << " ";
			cout << ptr << " ";
			cout << ptr->next << " ";
			cout << endl;
			ptr = ptr-> prev;
		}		
	}

	// print as ascending;
	else if (order == 0)
	{
		ptr = first;		
	
		// print if empty list;
		if (ptr == NULL)
		{
			cout << " Empty list! " << endl;
		}

		// print if not empty list;
		while (ptr != NULL)
		{
			cout << ptr->id << " ";
			cout << ptr->firstname << " ";
			cout << ptr->lastname << " ";
			for (int i=0; i < 10; ++i)
			{
				cout << *(ptr-> answer+i);
			}
			cout << " ";
			cout << ptr->prev << " ";
			cout << ptr << " ";
			cout << ptr->next << " ";
			cout << endl;
			ptr = ptr-> next;
		}
	}
}
// end list;
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ cat list.h
// declare a record class;
class Rec
{
   // friend List then it can access Rec's data member;
   friend class List;
   // record's data members;
   private:
   	char * id;
   	char firstname[15];
   	char lastname[15];
   	int answer[10];
   	struct Rec* prev;
   	struct Rec* next;;
   // record's methods
   public:
	void SetData (char *id_in, char *fn, char *ln, int *ans_in); // setdata for record;
	Rec (char *i, char *fn, char *ln, int *a); // constructor for record;
	Rec (void); // constructor to set id to null;
	void operator= (const Rec& r); // record copy function;
	Rec (const Rec& r); // record copy constructor;
	void Print (); // print a single record;
	~Rec(); // record class destructor;
};

// declare a list class;
class List
{
   // list's data members;
   private:
	Rec *first;
	Rec *last;
   // list's methods;
   public:
	List (void); // constructor set first and last to null;
	void operator= (List l); // copy function to deep copy a list;
	void deletelist (); // delete a list;
	int Count (char *Filename); // count lines in a file;	
	int AddItem (Rec r); // add items into list;
	int DeleteItem (char *delid); // delete the list by id;
	void PrintList (int order); // display the list;
	int ReadData (char *k, char *a); // read file data to list;
	int WriteData (char *nfile1, char *nfile2); // write list data to files;
};
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ make
g++ -c -g main.cpp
g++ -c -g list.cpp
g++ -g main.o list.o
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ ./a.out

1992 Hank Chigla 4433221100

----- Rec 123 ----------
888a Jerry Malega 4433221100
1992 Hank Chigla 4433221100
888a Jerry Malega 4433221100

----- Rec3 ----------
xxxx Mr Beepers 4433221100
1
1

----- mylist ----------
1992 Hank Chigla 4433221100 0 0x168e160 0x168e0d0 
888a Jerry Malega 4433221100 0x168e160 0x168e0d0 0 
0
1

####### mylist #######
1992 Hank Chigla 4433221100 0 0x168e160 0x168e0d0 
888a Jerry Malega 4433221100 0x168e160 0x168e0d0 0x168e330 
16 Larry Orlando 4433221100 0x168e0d0 0x168e330 0 

####### myotherlist #######
1992 Hank Chigla 4433221100 0 0x168e1f0 0x168e280 
888a Jerry Malega 4433221100 0x168e1f0 0x168e280 0 

 End test stuff 


Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
1

Enter ID AABBCC

First Name Joe

Last Name Black

Enter answers
1
2
3
4
5
6
7
8
9
0

Success!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
1

Enter ID AABBCC

First Name Ernie

Last Name Bert

Enter answers
1
2
3
4
5
6
7
8
9
0

Item failed to be added!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
1

Enter ID DDEE

First Name Big

Last Name Bird

Enter answers
0
0
0
0
0
0
0
0
0
0

Success!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3

Enter order 0 - Ascending, 1 - Descending
0
DDEE Big Bird 0000000000 0 0x168e540 0x168e3e0 
AABBCC Joe Black 1234567890 0x168e540 0x168e3e0 0x168e160 
1992 Hank Chigla 4433221100 0x168e3e0 0x168e160 0x168e0d0 
888a Jerry Malega 4433221100 0x168e160 0x168e0d0 0x168e330 
16 Larry Orlando 4433221100 0x168e0d0 0x168e330 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3

Enter order 0 - Ascending, 1 - Descending
1
16 Larry Orlando 4433221100 0x168e0d0 0x168e330 0 
888a Jerry Malega 4433221100 0x168e160 0x168e0d0 0x168e330 
1992 Hank Chigla 4433221100 0x168e3e0 0x168e160 0x168e0d0 
AABBCC Joe Black 1234567890 0x168e540 0x168e3e0 0x168e160 
DDEE Big Bird 0000000000 0 0x168e540 0x168e3e0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
4

Enter your key(.dat) filename to be read: key.dat


Enter your answers(.dat) filename to be read: answers.dat


Read key.dat and answers.dat Successfully!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3

Enter order 0 - Ascending, 1 - Descending
0
5671A Craig Busco 12315742199 0 0x1692fd0 0x1692bb0 
EES6D Mac Daddy 9876543210 0x1692fd0 0x1692bb0 0x1692e70 
56DFD LordMaynard Ferguson 1232145621 0x1692bb0 0x1692e70 0x168e400 
B7S6D George Gershwin 5426517895 0x1692e70 0x168e400 0x1692b00 
QQQQQ Dirk Giggler 1234567890 0x168e400 0x1692b00 0x16929c0 
A43D2 Benny Goodman 4595412357 0x1692b00 0x16929c0 0x1692d10 
A5FJ8 Ryan Mantzy 7894561235 0x16929c0 0x1692d10 0x1692c60 
NROP4 Debbie McDallas 5478512145 0x1692d10 0x1692c60 0x168e110 
A3345G Glenn Miller 5942145637 0x1692c60 0x168e110 0x1692a50 
A3345F Cole Porter 4563573457 0x168e110 0x1692a50 0x1692f20 
78SS3 Roberto Roddeneck 9876541230 0x1692a50 0x1692f20 0x1692dc0 
DFDD5 John Smithtrakdeux 1231231230 0x1692f20 0x1692dc0 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3

Enter order 0 - Ascending, 1 - Descending
1
DFDD5 John Smithtrakdeux 1231231230 0x1692f20 0x1692dc0 0 
78SS3 Roberto Roddeneck 9876541230 0x1692a50 0x1692f20 0x1692dc0 
A3345F Cole Porter 4563573457 0x168e110 0x1692a50 0x1692f20 
A3345G Glenn Miller 5942145637 0x1692c60 0x168e110 0x1692a50 
NROP4 Debbie McDallas 5478512145 0x1692d10 0x1692c60 0x168e110 
A5FJ8 Ryan Mantzy 7894561235 0x16929c0 0x1692d10 0x1692c60 
A43D2 Benny Goodman 4595412357 0x1692b00 0x16929c0 0x1692d10 
QQQQQ Dirk Giggler 1234567890 0x168e400 0x1692b00 0x16929c0 
B7S6D George Gershwin 5426517895 0x1692e70 0x168e400 0x1692b00 
56DFD LordMaynard Ferguson 1232145621 0x1692bb0 0x1692e70 0x168e400 
EES6D Mac Daddy 9876543210 0x1692fd0 0x1692bb0 0x1692e70 
5671A Craig Busco 12315742199 0 0x1692fd0 0x1692bb0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
2

Enter id: ZZZZZ

Delete Failed for ZZZZZ!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
2

Enter id: ERT342

Delete Failed for ERT342!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
1

Enter ID FE  GERBE

First Name Pat

Last Name Zeb

Enter answers
1
2
3
4
5
6
7
8
9
0

Success!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
2

Enter id: 5671A

Delete OK!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
5

Enter your new file name(newkey.dat) to be write: newkey.dat


Enter your new file name(newanswers.dat) to be write: n newanswers.dat


Write newkey.dat and newanswers.dat Successfully!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
4

Enter your key(.dat) filename to be read: key.dat


Enter your answers(.dat) filename to be read: answers.dat


Read key.dat and answers.dat Successfully!

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3

Enter order 0 - Ascending, 1 - Descending
0
5671A Craig Busco 12315742199 0 0x1693170 0x1692b00 
EES6D Mac Daddy 9876543210 0x1693170 0x1692b00 0x1693010 
56DFD LordMaynard Ferguson 1232145621 0x1692b00 0x1693010 0x168e400 
B7S6D George Gershwin 5426517895 0x1693010 0x168e400 0x1692d10 
QQQQQ Dirk Giggler 1234567890 0x168e400 0x1692d10 0x1692a50 
A43D2 Benny Goodman 4595412357 0x1692d10 0x1692a50 0x1692bd0 
A5FJ8 Ryan Mantzy 7894561235 0x1692a50 0x1692bd0 0x1692e70 
NROP4 Debbie McDallas 5478512145 0x1692bd0 0x1692e70 0x1692dc0 
A3345G Glenn Miller 5942145637 0x1692e70 0x1692dc0 0x168e130 
A3345F Cole Porter 4563573457 0x1692dc0 0x168e130 0x16930c0 
78SS3 Roberto Roddeneck 9876541230 0x168e130 0x16930c0 0x1692f60 
DFDD5 John Smithtrakdeux 1231231230 0x16930c0 0x1692f60 0 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
3

Enter order 0 - Ascending, 1 - Descending
1
DFDD5 John Smithtrakdeux 1231231230 0x16930c0 0x1692f60 0 
78SS3 Roberto Roddeneck 9876541230 0x168e130 0x16930c0 0x1692f60 
A3345F Cole Porter 4563573457 0x1692dc0 0x168e130 0x16930c0 
A3345G Glenn Miller 5942145637 0x1692e70 0x1692dc0 0x168e130 
NROP4 Debbie McDallas 5478512145 0x1692bd0 0x1692e70 0x1692dc0 
A5FJ8 Ryan Mantzy 7894561235 0x1692a50 0x1692bd0 0x1692e70 
A43D2 Benny Goodman 4595412357 0x1692d10 0x1692a50 0x1692bd0 
QQQQQ Dirk Giggler 1234567890 0x168e400 0x1692d10 0x1692a50 
B7S6D George Gershwin 5426517895 0x1693010 0x168e400 0x1692d10 
56DFD LordMaynard Ferguson 1232145621 0x1692b00 0x1693010 0x168e400 
EES6D Mac Daddy 9876543210 0x1693170 0x1692b00 0x1693010 
5671A Craig Busco 12315742199 0 0x1693170 0x1692b00 

Enter your choice 1 Add, 2 Delete, 3 Print, 4 Read file, 5 Write file, 0 quit 
0
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ cat newke[K[Kanswers.dat
EES6D 9876543210
56DFD 1232145621
B7S6D 5426517895
QQQQQ 1234567890
A43D2 4595412357
A5FJ8 7894561235
NROP4 5478512145
A3345G 5942145637
A3345F 4563573457
78SS3 9876541230
DFDD5 1231231230
GERBE 1234567890
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ cat newkey.dat
EES6D Mac Daddy
56DFD LordMaynard Ferguson
B7S6D George Gershwin
QQQQQ Dirk Giggler
A43D2 Benny Goodman
A5FJ8 Ryan Mantzy
NROP4 Debbie McDallas
A3345G Glenn Miller
A3345F Cole Porter
78SS3 Roberto Roddeneck
DFDD5 John Smithtrakdeux
GERBE Pat Zeb
]0;has92@acm:~/cs457/OOclass[has92@acm OOclass]$ exit
exit

Script done on Mon 14 Apr 2014 06:41:44 PM EDT
